/**
 * Gmail broadcast receiver
 * Intercepts intents generated by Gmail when updating email database, but uses javamail to fetch 
 * email due to security policy from Gmail 2.3.5 onwards
 */

package com.Android.Typewriter;

import java.io.IOException;
import java.util.Date;
import java.util.Properties;

import javax.mail.BodyPart;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeMultipart;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.StrictMode;
import android.util.Log;

public class GmailReceiver extends BroadcastReceiver {
	//sharedpreference keys
	public static final String SHARED_PREF_NAME = "SHARED_PREF_NAME";
	public static final String EMAIL_ADDR_KEY = "EMAIL_ADDRESS";
	public static final String PWD_ADDR_KEY = "PASSWORD_LIST";
	private static final String ENABLED_KEY = "ENABLED_LIST";
	
	@Override
	public void onReceive(Context context, Intent intent) {
		Message message;
		Properties props = System.getProperties();
		//disable network on main thread errors, since this is already in the background anyways
		StrictMode.setThreadPolicy(
				new StrictMode.ThreadPolicy.Builder().detectAll().permitAll().build());
		//get email account info lists
		SharedPreferences mPrefs = context.getSharedPreferences(SHARED_PREF_NAME, context.MODE_PRIVATE);
		String[] addrList = mPrefs.getString(EMAIL_ADDR_KEY, "").split(",");
		String[] pwdList = mPrefs.getString(PWD_ADDR_KEY, "").split(",");
		String[] enabledList = mPrefs.getString(ENABLED_KEY, "").split(",");
		Session session = Session.getDefaultInstance(props, null);
		if(addrList != null){
			
			for(int i=0; i<addrList.length; i++){
				//if the account is set to print emails, then get the previous time that an email was printed, 20 seconds before otherwise
				if(Integer.parseInt(enabledList[i]) == 1){
					long previousTime = mPrefs.getLong(addrList[i]+"_time", new Date().getTime()-20000);
					
				try {
					//log in to the user's account
					Store store = session.getStore("imaps");
					store.connect("imap.gmail.com", addrList[i], pwdList[i]);
					Folder inbox = store.getFolder("Inbox");
					inbox.open(Folder.READ_ONLY);
					//get the first email in the inbox
					message = inbox.getMessage(inbox.getMessageCount());
					try {
						//get the time the email was sent, and the content of the message 
						long emailTime = message.getSentDate().getTime();
						String intentExtraMessage = null;
						if(message.getContent().getClass().equals(MimeMultipart.class)){
							MimeMultipart mmp = (MimeMultipart)message.getContent();
							BodyPart bp = mmp.getBodyPart(0);
							intentExtraMessage = bp.getContent().toString();
							
						}else if (message.getContent().getClass().equals(String.class)){
							intentExtraMessage = (String) message.getContent();
						}
						
						//if the email was actually newer (the received intent is only for when the database changes, which includes 
						//deletions,etc.), then amend the time to the value from the email,format the message, and send it to the service
						if(emailTime > previousTime){
							Editor editor = mPrefs.edit();
							editor.putLong(addrList[i]+"_time",emailTime);
							editor.commit();
							Intent msg = new Intent();
							System.out.println("Prepping message for delivery.");
							msg.setAction("com.rancidbacon.BackgroundUsbAccessory.PRINT_MSG");
							if(intentExtraMessage.length()>250){
								msg.putExtra("MSG","From: "+ message.getFrom()[0].toString()+"\nMsg: "+""+intentExtraMessage.subSequence(0,247)+"...\n");

							}
							else{
								msg.putExtra("MSG","From: "+ message.getFrom()[0].toString()+"\nMsg: "+""+intentExtraMessage+"\n");
							}
							context.sendBroadcast(msg);
							
						}
						else{
							Log.i("GmailReceiver","Message has been displayed already");
						}
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				} catch (MessagingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				}
			}
		}
	}
}




